{"version":3,"sources":["constants.ts","components/Input/Input.tsx","components/Button/Button.tsx","redux/fetchState/reducer.ts","pages/LoginPage/LoginPage.tsx","components/Header/Header.tsx","components/Tabs/Tab/Tab.tsx","components/Tabs/Tab/TabView/TabView.tsx","helpers/jsonFormat.ts","components/Tabs/Tabs.tsx","redux/consoleState/reducer.ts","pages/ConsolePage/ConsolePage.tsx","api/client.ts","helpers/sendsay.js","redux/authState/reducer.ts","app/App.tsx","hooks/useRoutes.tsx","serviceWorker.js","redux/fetchState/workers.ts","redux/fetchState/wathcers.ts","store/index.ts","index.tsx"],"names":["ROUTES","LOCAL_STORAGE","COOKIE_NAMES","REQUESTS","FORM","name","options","validate","value","test","Input","props","error","className","label","optional","Button","text","loading","disabled","onClick","initialState","data","undefined","slice","createSlice","reducers","postLogin","login","sublogin","passwd","postLogout","getUserData","postConsoleRequest","action","setData","state","payload","console","log","requestName","setFetching","setErrorFetching","JSON","stringify","resetToInitialFetchState","actions","LOGIN","SUB_LOGIN","PASSWORD","LoginPage","useSelector","fetchState","dispatch","useDispatch","useForm","register","handleSubmit","errors","watch","formState","src","type","loginFormData","Object","keys","length","Header","React","memo","subLogin","useState","fullScreen","setFullScreen","document","fullscreenElement","documentElement","requestFullscreen","exitFullscreen","Tab","isLast","isActive","onChangeDropDown","executeClick","removeRequest","inputText","dropDown","setDropDown","copyMode","setCopyMode","dropDownStateRef","useRef","current","changeDropDown","boolean","event","stopPropagation","tab","onClickAnotherPlaceHandler","isIncludesTab","composedPath","includes","useEffect","addEventListener","removeEventListener","ref","navigator","clipboard","writeText","then","TabView","control","inputField","outputField","render","readOnly","jsonFormat","json","replace","forEach","replaceAll","Tabs","tabs","removeAllRequests","setActiveTab","activeTab","isOpenTab","setIsOpenTab","style","zIndex","map","t","index","key","id","input","errorRequest","output","errorJson","requestHistory","parse","localStorage","getItem","setRequestHistoryInput","setRequestHistoryOutput","setRequestHistoryErrorJson","setRequestHistoryErrorRequest","appendRequestHistory","prevRequestHistory","indexOfRequest","findIndex","pop","unshift","removeRequestHistory","removableIndexEl","filter","_","resetToInitialConsoleState","removeItem","ConsolePage","loginName","authState","consoleState","useCallback","removeRequestHistoryAC","setValue","useController","field","setItem","onFormatterHandler","inputValue","preparedJson","onSendHandle","isIndexEqualToActiveTab","values","join","sendsay","Sendsay","requestToSendsay","request","setCookie","hours","expires","date","Date","setTime","getHours","toUTCString","cookie","isAuthorized","setIsAuthorized","setUserData","App","routes","path","component","to","session_cookie","nameEQ","ca","split","i","c","charAt","substring","indexOf","getCookie","setSessionFromCookie","Boolean","window","location","hostname","match","workerLogin","workerLogout","workerConsoleRequest","workerGetUserData","put","call","session","push","explain","restPayload","response","list","watcherLogin","watcherLogout","watcherConsoleRequest","watcherGetUserData","takeEvery","history","createBrowserHistory","rootReducer","combineReducers","router","connectRouter","authReducer","consoleReducer","fetchReducer","sagaMiddleware","createSagaMiddleware","middlewares","routerMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","concat","getState","run","ReactDOM","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e03cd803.chunk.js","sourcesContent":["export const BASE_URL = \"https://flexwappa.github.io/api-console\"\nexport const ROUTES = {\n    LOGIN:\"/login\",\n    MAIN:\"/main\",\n}\nexport const LOCAL_STORAGE = {\n    REQUEST_HISTORY:\"REQUEST_HISTORY\"\n}\nexport const COOKIE_NAMES = {\n    SENDSAY_SESSION:\"sendsay_session\"\n}\nexport const REQUESTS = {\n    POST_LOGIN:\"login\",\n    POST_CONSOLE:\"POST_CONSOLE\",\n    POST_LOGOUT:\"POST_LOGOUT\",\n    GET_USER_DATA:\"GET_USER_DATA\",\n}\n\n\nexport const FORM = {\n    LOGIN: {\n        name: 'login',\n        options: {\n            validate: (value: string) => {\n                return !!value && /\\w/.test(value) && !/[а-яА-Яё]/.test(value)\n            },\n        }\n    },\n    SUB_LOGIN: {\n        name: 'sublogin',\n        options: {\n            validate: (value: string) => true\n        }\n    },\n    PASSWORD: {\n        name: 'passwd',\n        options: {\n            validate: (value: string) => {\n                return !!value && !/[а-яА-Яё]/.test(value)\n            },\n        }\n    },\n    TEXT_AREA_INPUT: {\n        name: 'input',\n        options: {\n            validate: (value: string) => {\n                return !!value && !/[а-яА-Яё]/.test(value)\n            },\n        }\n    },\n    TEXT_AREA_OUTPUT: {\n        name: 'output',\n        options: {\n            validate: (value: string) => {\n                return !!value && !/[а-яА-Яё]/.test(value)\n            },\n        }\n    },\n\n\n}\n","import * as React from \"react\";\nimport {InternalFieldName} from \"react-hook-form/dist/types/fields\";\nimport {ChangeHandler, RefCallBack} from \"react-hook-form/dist/types/form\";\nimport \"./Input.styles.css\"\n\ntype PropsTypes = {\n    onChange: ChangeHandler;\n    onBlur: ChangeHandler;\n    ref: RefCallBack;\n    name: InternalFieldName;\n    label: string\n    optional?: boolean\n    error:boolean\n    type?: string\n}\n\nconst Input  = (props: PropsTypes) => {\n    const {error} = props\n    return (\n        <div className={`input-wrapper ${error && \"input-wrapper-error\"}`}>\n\n            <div className='input-wrapper__head'>\n                <label  className='input-wrapper__header__label'>{props.label}</label>\n                {props.optional && <span className='input-wrapper__header__optional'>Опционально</span>}\n            </div>\n\n            <div className=\"input-wrapper__body\">\n                <input {...props} className='input-wrapper__input'/>\n            </div>\n        </div>\n    )\n}\n\nexport default Input\n","import * as React from \"react\";\nimport \"./Button.styles.css\"\n\ntype PropsType = {\n    text: string\n    loading: boolean\n    disabled: boolean\n    onClick: () => void\n}\n\nexport const Button  = ( {text, loading, disabled, onClick}: PropsType) => {\n\n    const onClickHandler = () => {\n        if (loading || disabled) return\n        onClick()\n    }\n\n    return (\n        <div className={`button ${disabled && \"button-disabled\"}`} onClick={onClickHandler}>\n            {loading ? \"Loading...\" : text}\n        </div>\n    )\n}\n\n","import {createSlice} from \"@reduxjs/toolkit\";\nimport {REQUESTS} from \"../../constants\";\n\nconst initialState = {\n    [REQUESTS.POST_LOGIN] : {\n        data: undefined,\n        loading: false,\n        error: ''\n    },\n\n    [REQUESTS.POST_CONSOLE] : {\n        data: undefined,\n        loading: false,\n        error: ''\n    },\n\n    [REQUESTS.POST_LOGOUT] : {\n        data: undefined,\n        loading: false,\n        error: ''\n    },\n    [REQUESTS.GET_USER_DATA] : {\n        data: undefined,\n        loading: false,\n        error: ''\n    }\n}\n\n// action, actionTypes and reducer\nconst slice = createSlice({\n    name: 'fetch',\n    initialState,\n    reducers: {\n        postLogin: ({ login, sublogin, passwd }:any) => {},\n        postLogout: () => {},\n        getUserData: () => {},\n        postConsoleRequest: ( { action } : any) => {},\n        setData: (state, {payload}) => {\n            console.log(\"setFetching\", state[payload.requestName].loading, payload)\n            const {requestName, loading} = payload\n            state[requestName].loading = loading\n        },\n\n        setFetching: (state, {payload}) => {\n            console.log(\"setFetching\", state[payload.requestName].loading, payload)\n            const {requestName, loading} = payload\n            state[requestName].loading = loading\n        },\n\n        setErrorFetching: (state, {payload}) => {\n            console.log(\"setErrorFetching\", payload)\n            const {requestName, error} = payload\n            state[requestName].error = JSON.stringify(error)\n        },\n\n        resetToInitialFetchState: (state, {payload} : {type:string, payload: { requestName?:string }}) => {\n            console.log(\"resetToInitialFetchState\", payload)\n            const {requestName} = payload\n            if (requestName) {\n                state[requestName].loading = false\n                state[requestName].error = \"\"\n            }\n            return initialState\n        }\n    }\n})\n\nexport const {\n    setFetching,\n    setErrorFetching,\n    resetToInitialFetchState,\n    postLogin,\n    postLogout,\n    getUserData,\n    postConsoleRequest\n} = slice.actions;\nexport default slice.reducer;","import React from 'react';\nimport {useForm} from \"react-hook-form\";\nimport {BASE_URL, FORM, REQUESTS} from \"../../constants\";\nimport Input from \"../../components/Input/Input\";\nimport './LoginPage.styles.css'\nimport {Button} from \"../../components/Button/Button\";\n// import {loginThunk} from \"../../redux/authReducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {storeType} from \"../../store\";\nimport {postLogin} from \"../../redux/fetchState/reducer\";\n\nconst {LOGIN, SUB_LOGIN, PASSWORD} = FORM\n\nconst LoginPage = () => {\n    const loading = useSelector((state:storeType) => state.fetchState[REQUESTS.POST_LOGIN].loading )\n    const error = useSelector((state:storeType) => state.fetchState[REQUESTS.POST_LOGIN].error )\n    const dispatch = useDispatch()\n    const {register, handleSubmit, watch, formState: {errors}} = useForm();\n    const onSubmit = (loginFormData: object) => {\n        //login:\"karinalol854@gmail.com\", passwd: \"jo2Fadaqu\"\n        // @ts-ignore\n        dispatch(postLogin(loginFormData))\n    }\n\n    return (\n        <div className='login-page'>\n                <img className='login-page__logo' src={`${BASE_URL}/icons/logo.svg`}/>\n            <div className=\"login-page__content\">\n\n                <div className=\"login-page__content__head\">\n                    <span className=\"login-page__content__head__title\">API-консолька</span>\n                </div>\n                {error && <div className='login-page__error'>\n                    <div className='login-page__error__header'>\n                        <img src=\"api-console/icons/error-emoji.svg\"/>\n                        <span>Вход не вышел</span>\n                    </div>\n                    <div className='login-page__error__description'>{error}</div>\n                </div>}\n                <div className=\"login-page__content__body\">\n                    <Input\n                        error={errors[LOGIN.name]}\n                        label='Логин'\n                        {...register(LOGIN.name, LOGIN.options)}\n                    />\n                    <Input\n                        error={errors[SUB_LOGIN.name]}\n                        label='Сублогин'\n                        optional={true}\n                        {...register(SUB_LOGIN.name, SUB_LOGIN.options)}\n                    />\n                    <Input\n                        type={'password'}\n                        error={errors[PASSWORD.name]}\n                        label='Пароль'\n                        {...register(PASSWORD.name, PASSWORD.options)}\n                    />\n                </div>\n\n                <div className=\"login-page__content__footer\">\n                    <Button text='Войти' onClick={handleSubmit(onSubmit)} loading={loading} disabled={!!Object.keys(errors).length}/>\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default LoginPage\n","import React, {useState} from \"react\";\nimport './Header.styles.css'\nimport {useDispatch} from \"react-redux\";\nimport {postLogout} from \"../../redux/fetchState/reducer\";\nimport exitButton from '../../../public/icons/full-screen-exit.svg'\n\ntype PropsTypes = {\n    login: string\n    subLogin?: string\n}\n\nexport const Header = React.memo(\n    ({login, subLogin}: PropsTypes) => {\n\n        const [fullScreen, setFullScreen] = useState(false)\n        const dispatch = useDispatch()\n\n        function toggleFullScreen() {\n            if (!document.fullscreenElement) {\n                document.documentElement.requestFullscreen();\n                setFullScreen(true)\n                return\n            }\n            if (document.exitFullscreen) {\n                document.exitFullscreen();\n                setFullScreen(false)\n            }\n        }\n\n        const onExitLogout = () => {\n            console.log('exit')\n            dispatch(postLogout())\n        }\n\n        return (\n            <div className=\"header\">\n\n                <div className=\"header__logo-wrapper\">\n                    <img className='header__logo-wrapper_img' src=\"/icons/logo.svg\"/>\n                    <span className=\"header__logo-wrapper__title\">API-консолька</span>\n                </div>\n\n                <div className=\"header__right-block\">\n                    <div className=\"header__right-block__user-info\">{login} {subLogin ? `:  ${subLogin}` : ''}</div>\n                    <div\n                        onClick={onExitLogout}\n                        className=\"header__right-block__exit-button\">\n                        <span>Выйти</span>\n                        <img className=\"header__right-block__exitButton_img\"\n                             src=\"/icons/log-out.svg\"/>\n                    </div>\n\n                    <img\n                        className=\"header__right-block__full-screen-button\"\n                        src={fullScreen ? '/icons/full-screen-exit.svg' : '/icons/full-screen.svg'}\n                        onClick={toggleFullScreen}\n                    />\n                </div>\n            </div>\n        )\n    }\n)","import React, {createRef, DetailedHTMLProps, HTMLAttributes, useEffect, useRef, useState} from \"react\";\nimport './Tab.styles.css'\n\n\ntype PropsTypes = {\n    label: string\n    onClick: Function\n    onChangeDropDown: Function\n    executeClick: Function | any\n    removeRequest: Function\n    isActive: boolean\n    isLast: boolean\n    error: boolean\n    inputText: string\n}\n\nexport const Tab =\n    ({label, isLast, isActive, onClick, onChangeDropDown, executeClick, removeRequest, error,inputText}: PropsTypes) => {\n\n        const [dropDown, setDropDown] = useState(false)\n        const [copyMode, setCopyMode] = useState(false)\n        const dropDownStateRef = useRef<any>();\n        dropDownStateRef.current = dropDown\n\n        const onCopyHandler = () => {\n            console.log('onCopyHandler')\n\n            changeDropDown(false)\n            //Copy to clipboard\n            navigator.clipboard.writeText(inputText).then(\n                () => setCopyMode(!copyMode),\n                undefined\n            );\n        }\n        const changeDropDown = (boolean: boolean, event?:React.MouseEvent<any>) => {\n            event && event.stopPropagation()\n            onChangeDropDown(boolean)\n            setDropDown(boolean)\n        }\n\n        const tab = useRef<any>()\n\n        const onClickAnotherPlaceHandler = (event: MouseEvent) => {\n            const isIncludesTab = event.composedPath().includes(tab.current)\n            dropDownStateRef.current && !isIncludesTab && changeDropDown(false)\n        }\n\n        useEffect(() => {\n            document.addEventListener('click', onClickAnotherPlaceHandler)\n            return () => {\n                document.removeEventListener(\"click\", onClickAnotherPlaceHandler)\n            }\n        }, [])\n\n\n        const onClickRemoveHandler = () => {\n            removeRequest()\n            setDropDown(false)\n        }\n        const onClickExecuteHandler = () => {\n            changeDropDown(false)\n            executeClick()\n        }\n\n        return (\n            <div\n                className={\"tab-wrapper\"}\n                ref={tab}\n            >\n                <div onClick={() => onClick()}  className={`tab ${isActive && \"tab-active\"}`}>\n                    <img className='tab__request-feedback'\n                         src={\n                             `${error\n                                 ? '/icons/red-dot.svg'\n                                 : '/icons/green-dot.svg'}`\n                         }\n                    />\n                    <span className=\"tab__label\">{label}</span>\n                    <img\n                        className='tab__options-button'\n                        src='/icons/dots.svg'\n                        onClick={(event) => changeDropDown(!dropDown, event)}\n                    />\n                </div>\n                {dropDown && <div className='tab__options-list'>\n                    <div onClick={ onClickExecuteHandler }>Выполнить</div>\n                    <div onClick={ onCopyHandler }>Скопировать</div>\n                    {!isLast && <div onClick={onClickRemoveHandler} className='tab__options-list__delete'>Удалить</div>}\n                </div>}\n                {\n                    copyMode &&\n                    <div className={`tab__copied`}>\n                        <span className='tab__copied__span'>\n                            Скопировано\n                        </span>\n\n                    </div>\n\n                }\n            </div>\n\n        )\n    }\n","import React from \"react\";\nimport './TabView.styles.css'\nimport {Controller} from \"react-hook-form\";\nimport {FORM} from \"../../../../constants\";\n\n\ntype PropsTypes = {\n    error: boolean,\n    inputField: any,\n    outputField: any\n    control: any\n}\n\nexport const TabView = ({error, control, inputField, outputField}: PropsTypes) => {\n\n    console.log('outputField ', !!error, outputField)\n\n    return (\n        <div className={`tab-view ${!!error && \"tab-view-error\"}`}>\n            <div className=\"tab-view__input-field\">\n                <span className=\"tab-view__input-field__span\">Запрос:</span>\n                <Controller\n                    control={control}\n                    name={FORM.TEXT_AREA_INPUT.name}\n                    render={() => <textarea\n                        {...inputField}\n                        className=\"tab-view__input-field__textarea\"/>\n                    }\n                />\n            </div>\n            <div className=\"tab-view__input-field\">\n                <span className=\"tab-view__input-field__span\">Ответ:</span>\n                <Controller\n                    control={control}\n                    name={FORM.TEXT_AREA_OUTPUT.name}\n                    render={() => <textarea readOnly value={ error ? error : outputField.value }\n                                            className=\"tab-view__input-field__textarea\"/>\n                    }\n                />\n\n            </div>\n        </div>\n    )\n}\n","export const jsonFormat = (json:string) => {\n    const cases = [\n        {value:\"{\", replace:\"{\\n  \"},\n        {value:\"}\", replace:\"\\n}\"},\n        {value:\",\", replace:\",\\n  \"},\n    ]\n    cases.forEach( ({value, replace}:any) => {\n        json = json.replaceAll(value, replace)\n    } )\n    return json\n}","import React, {useState} from \"react\";\nimport './Tabs.styles.css'\nimport {Tab} from \"./Tab/Tab\";\nimport {TabView} from \"./Tab/TabView/TabView\";\nimport {useDispatch} from \"react-redux\";\nimport {removeRequestHistory} from \"../../redux/consoleState/reducer\";\nimport {jsonFormat} from \"../../helpers/jsonFormat\";\n\n\ntype PropsTypes = {\n    tabs: Array<object>\n    outputField: any\n    inputField: any\n    control: any,\n    removeRequest: Function\n    removeAllRequests: Function\n    executeClick: Function\n    setActiveTab: Function\n    activeTab: number | string\n    // error: any\n}\n\n\nexport const Tabs =\n    (props: PropsTypes) => {\n        const {tabs, inputField, removeRequest, executeClick, removeAllRequests, outputField, control, setActiveTab, activeTab} = props\n        const [isOpenTab, setIsOpenTab] = useState(false)\n        return (\n            <div className={\"tabs\"}>\n                <div\n                    // style={{overflowY: isOpenTab ? \"hidden\" : \"scroll\"}}\n                    className='tabs__row'\n                >\n                    <div\n                        style={{zIndex:isOpenTab ? 10 : 0 }}\n                        className={'tabs__row__absolute'}\n                    >\n                        {tabs.map((t: any, index) => (\n                            <Tab key={t.id}\n                                 executeClick={() => executeClick(index)}\n                                 inputText={t.input}\n                                 isLast={index === 0}\n                                 removeRequest={() => removeRequest(index)}\n                                 onChangeDropDown={(isOpenTab:boolean) => setIsOpenTab(isOpenTab)}\n                                 label={t.action}\n                                 error={t.errorRequest}\n                                 isActive={index === activeTab}\n                                 onClick={() => setActiveTab(index)}\n                            />\n                        ))\n                        }\n                    </div>\n\n                </div>\n\n                {tabs.map((t: any, index) => (\n                    activeTab === index ? <TabView control={control}\n                                                  inputField={inputField}\n                                                  outputField={{...outputField, value: jsonFormat(t.output)}}\n                                                  error={t.errorJson}\n                    /> : null\n                ))\n                }\n                <img className='tabs__row__reset' src=\"/icons/cross.svg\" onClick={ () => removeAllRequests() } />\n            </div>\n        )\n    }\n","import {createSlice} from \"@reduxjs/toolkit\";\nimport {LOCAL_STORAGE} from \"../../constants\";\n\nconst initialRequestHistory = [\n    {action: 'pong', input:\"{\\n\" +\n            \"  \\\"action\\\":\\\"pong\\\"\\n\" +\n            \"}\\n\", output: \"\", errorRequest:\"\", errorJson:\"\"},\n]\nconst initialState = {\n    requestHistory: JSON.parse(\n        (localStorage.getItem(LOCAL_STORAGE.REQUEST_HISTORY) as any)\n    ) || [...initialRequestHistory],\n\n}\n\n// action, actionTypes and reducer\nconst slice = createSlice({\n    name: 'console',\n    initialState,\n    reducers: {\n        // setActiveTab: (state, {payload}) => {\n        //     console.log(\"setRequestHistoryInput\", payload)\n        //     const {index} = payload\n        //     state.activeTab = index\n        // },\n        setRequestHistoryInput: (state, {payload}) => {\n            console.log(\"setRequestHistoryInput\", payload)\n            const {index, input} = payload\n            state.requestHistory[index].input = input\n        },\n        setRequestHistoryOutput: (state, {payload}) => {\n            console.log(\"setRequestHistoryOutput\", payload)\n            const {index, output} = payload\n            state.requestHistory[index].output = JSON.stringify(output)\n        },\n        setRequestHistoryErrorJson: (state, {payload}: {type:string, payload: {index:number, errorJson:string} }) => {\n            console.log(\"setRequestHistoryErrorJson\", payload)\n            const {index, errorJson} = payload\n            state.requestHistory[index].errorJson = errorJson ? \"Bad JSON format!\" : \"\"\n        },\n        setRequestHistoryErrorRequest: (state, {payload}: {type:string, payload: {index:number, errorRequest:string} }) => {\n            console.log(\"setRequestHistoryError\", payload)\n            const {index, errorRequest} = payload\n            state.requestHistory[index].errorRequest = errorRequest ? JSON.stringify(errorRequest) : \"\"\n        },\n        appendRequestHistory: (state, {payload}: {type:string, payload: {action:string, input:string} }):any => {\n            const {action, input} = payload\n            console.log(\"appendRequestHistory\", payload)\n            // const {action: {action}, input} = payload\n            const prevRequestHistory = state.requestHistory\n            const indexOfRequest = prevRequestHistory.findIndex( ({action}:any) => action === payload.action )\n            if(indexOfRequest === -1) {\n                if(prevRequestHistory.length === 15) {\n                    state.requestHistory.pop()\n                }\n                console.log(\"HELLO prevRequestHistory\")\n                state.requestHistory.unshift({...payload, output: \"\", errorRequest:\"\", errorJson:\"\" })\n            } else {\n                [prevRequestHistory[0], prevRequestHistory[indexOfRequest]] = [prevRequestHistory[indexOfRequest], prevRequestHistory[0]]\n            }\n        },\n\n        removeRequestHistory: (state, {payload}: any = {}) => {\n            console.log(\"removeRequestHistory\", payload)\n            const {index:removableIndexEl} = payload\n            if(removableIndexEl !== undefined) {\n                state.requestHistory = state.requestHistory.filter(\n                    (_:any, index:number) => index !== removableIndexEl\n                )\n            }\n            else state.requestHistory = [state.requestHistory[0]]\n        },\n        resetToInitialConsoleState: () => {\n            localStorage.removeItem(LOCAL_STORAGE.REQUEST_HISTORY)\n            return initialState\n        },\n    }\n});\n\nexport const {\n    setRequestHistoryErrorJson,\n    setRequestHistoryErrorRequest,\n    setRequestHistoryInput,\n    appendRequestHistory,\n    removeRequestHistory,\n    resetToInitialConsoleState,\n    setRequestHistoryOutput\n} = slice.actions;\n\nexport default slice.reducer;\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {Header} from \"../../components/Header/Header\";\nimport {Tabs} from \"../../components/Tabs/Tabs\";\nimport './Console.styles.css'\nimport {Button} from \"../../components/Button/Button\";\nimport {useController, useForm} from \"react-hook-form\";\nimport {FORM, LOCAL_STORAGE, REQUESTS} from \"../../constants\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {storeType} from \"../../store\";\nimport {postConsoleRequest} from \"../../redux/fetchState/reducer\";\nimport {\n    appendRequestHistory,\n    removeRequestHistory as removeRequestHistoryAC,\n    setRequestHistoryErrorJson,\n} from \"../../redux/consoleState/reducer\";\nimport {jsonFormat} from \"../../helpers/jsonFormat\";\n\n\nconst ConsolePage = () => {\n\n    const loading = useSelector((state: storeType) => state.fetchState[REQUESTS.POST_CONSOLE].loading)\n\n    const loginName = useSelector((state: storeType) => state.authState.login)\n    // @ts-ignore\n    const requestHistory = useSelector((state: storeType) => state.consoleState.requestHistory)\n\n    const dispatch = useDispatch()\n    const removeRequestHistory = useCallback(\n        (index?:number) => dispatch(\n            removeRequestHistoryAC({ index })\n        ), [dispatch]\n    )\n\n    const [activeTab, setActiveTab] = useState(0)\n    const {setValue, handleSubmit, watch, control} = useForm();\n    const {field: inputField} = useController({\n        name: FORM.TEXT_AREA_INPUT.name, control\n    })\n    const {field: outputField} = useController({\n        name: FORM.TEXT_AREA_OUTPUT.name, control\n    })\n\n    useEffect(() => {\n        setValue(FORM.TEXT_AREA_INPUT.name, requestHistory[activeTab].input)\n    }, [activeTab])\n\n    useEffect(() => {\n        localStorage.setItem(LOCAL_STORAGE.REQUEST_HISTORY, JSON.stringify(requestHistory))\n    }, [requestHistory])\n\n    const removeRequestHandler = (index:number) => {\n        removeRequestHistory(index)\n        if(index === activeTab) setActiveTab(index - 1)\n    }\n    const removeAllRequestsHandler = () => {\n        removeRequestHistory()\n        setActiveTab(0)\n    }\n\n    const onFormatterHandler = () => {\n        try {\n            const inputValue = inputField.value\n            const json = JSON.stringify(JSON.parse(inputValue))\n            const preparedJson = jsonFormat(json)\n            setValue(FORM.TEXT_AREA_INPUT.name, preparedJson)\n            dispatch(setRequestHistoryErrorJson({errorJson:\"\", index:activeTab} ))\n        } catch (error) {\n            dispatch(setRequestHistoryErrorJson({errorJson:error, index:activeTab} ))\n        }\n\n    }\n\n    const onSendHandle = (index:number) => {\n        try {\n            const isIndexEqualToActiveTab = index === activeTab\n            const input = inputField.value\n            const payload = isIndexEqualToActiveTab ? JSON.parse(input) : JSON.parse(requestHistory[index].input)\n            onFormatterHandler()\n            // @ts-ignore\n            dispatch(postConsoleRequest({...payload, index}))\n            dispatch(\n                appendRequestHistory({\n                    action:Object.values(payload).join(), input,\n                })\n            )\n            if(!isIndexEqualToActiveTab) {\n                setValue(FORM.TEXT_AREA_INPUT.name, requestHistory[index].input)\n            } else setActiveTab(0)\n\n        } catch (error) {\n            dispatch(setRequestHistoryErrorJson({errorJson:error, index} ))\n        }\n    }\n\n    return (\n        <div className='console-page'>\n            <Header login={loginName} />\n            <div className=\"console-page__content\">\n                <Tabs activeTab={activeTab}\n                      executeClick={onSendHandle}\n                      removeRequest={removeRequestHandler}\n                      removeAllRequests={removeAllRequestsHandler}\n                      setActiveTab={setActiveTab}\n                      control={control}\n                      inputField={inputField}\n                      outputField={outputField}\n                      tabs={requestHistory}/>\n            </div>\n            <div className='console-page__footer'>\n                <Button text='Отправить' loading={loading} disabled={false} onClick={handleSubmit(() => onSendHandle(activeTab))}/>\n                <div className=\"console-page__footer__right-block\">\n                    <img className='console-page__footer__right-block__img' src=\"/icons/format.svg\"/>\n                    <span className=\"console-page__footer__right-block__span\" onClick={onFormatterHandler}>Форматировать</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n\n\nexport default ConsolePage\n","// @ts-ignore\nimport Sendsay from 'sendsay-api'\nexport const sendsay = new Sendsay()\n\nexport const requestToSendsay = (action: string , payload: object) => {\n    console.log('REQUEST TO SENDSAY', action, payload)\n    return sendsay.request({\n        action, ...payload\n    })\n}\n\n\n\n\n","function setCookie(name,value, hours) {\n    let expires = \"\";\n    if (hours) {\n        const date = new Date();\n        date.setTime(date.getHours() + hours);\n        expires = \"; expires=\" + date.toUTCString();\n    }\n    console.log(\"HELLO\", expires)\n    document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\";\n}\nfunction getCookie(name) {\n    const nameEQ = name + \"=\";\n    const ca = document.cookie.split(';');\n    for(let i=0;i < ca.length;i++) {\n        const c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n    }\n    return null;\n}\nfunction eraseCookie(name) {\n    document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n}\n\nexport {eraseCookie, getCookie, setCookie}","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    login: '',\n    isAuthorized: false,\n}\n\n// action, actionTypes and reducer\nconst slice = createSlice({\n    name: 'login',\n    initialState,\n    reducers: {\n        setIsAuthorized: (state, action) => {\n            state.isAuthorized = action.payload\n        },\n        setUserData: (state, {payload}: {type:string, payload: string}) => {\n            state.login = payload\n        }\n    }\n});\n\nexport const { setIsAuthorized, setUserData } = slice.actions;\nexport default slice.reducer;","import * as React from 'react';\nimport LoginPage from \"../pages/LoginPage/LoginPage\";\nimport ConsolePage from \"../pages/ConsolePage/ConsolePage\";\nimport {Route, Switch} from 'react-router-dom';\nimport \"./App.styles.css\"\nimport {COOKIE_NAMES, LOCAL_STORAGE, ROUTES} from \"../constants\";\nimport {useRoutes} from \"../hooks/useRoutes\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {storeType} from \"../store\";\nimport {useEffect} from \"react\";\nimport {sendsay} from \"../api/client\";\nimport {getCookie} from \"../helpers/sendsay\";\nimport {setIsAuthorized} from \"../redux/authState/reducer\";\nimport {getUserData} from \"../redux/fetchState/reducer\";\n\n\nfunction App() {\n    const isAuth = useSelector((state: storeType) => state.authState.isAuthorized)\n    const routes = useRoutes(isAuth)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const session_cookie = getCookie(COOKIE_NAMES.SENDSAY_SESSION)\n        sendsay.setSessionFromCookie()\n        dispatch(setIsAuthorized(!!session_cookie))\n        dispatch(getUserData())\n    }, [])\n\n    return (\n        <div className=\"App\">\n            {routes}\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport {Redirect, Route, Switch} from \"react-router-dom\"\nimport {ROUTES} from \"../constants\";\nimport LoginPage from \"../pages/LoginPage/LoginPage\";\nimport ConsolePage from \"../pages/ConsolePage/ConsolePage\";\n\nexport const useRoutes = (isAuthenticated: boolean) => {\n    if(isAuthenticated) {\n        return (\n            <Switch>\n                <Route path={ROUTES.MAIN} component={ConsolePage}/>\n                <Redirect to={ROUTES.MAIN}/>\n            </Switch>\n        )\n    }\n\n    return (\n        <Switch>\n            <Route path={ROUTES.LOGIN} component={LoginPage}/>\n            <Redirect to={ROUTES.LOGIN}/>\n        </Switch>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","// @ts-ignore\nimport {call, delay, put} from \"redux-saga/effects\";\nimport {postLogout, resetToInitialFetchState, setErrorFetching, setFetching} from \"../fetchState/reducer\";\nimport {COOKIE_NAMES, REQUESTS, ROUTES} from \"../../constants\";\nimport {requestToSendsay, sendsay} from \"../../api/client\";\nimport {push} from \"connected-react-router\";\nimport {setIsAuthorized, setUserData} from \"../authState/reducer\";\nimport {eraseCookie, setCookie} from \"../../helpers/sendsay\";\nimport {\n    removeRequestHistory,\n    resetToInitialConsoleState,\n    setRequestHistoryErrorRequest,\n    setRequestHistoryOutput\n} from \"../consoleState/reducer\";\n\n\n//LOGIN REQUEST WORKER\nexport type workerLoginTypes = { type: string, payload: { login:string, sublogin:string, passwd:string }}\nexport function* workerLogin({ type, payload }: workerLoginTypes ): any {\n    //loading...\n    yield put(setFetching({requestName: REQUESTS.POST_LOGIN, loading: true}))\n    try {\n        //login request -->\n        const {session} = yield call(() => requestToSendsay(\"login\", payload)) || {}\n        console.log('WORKER LOGIN RESPONSE: ', session)\n        setCookie(COOKIE_NAMES.SENDSAY_SESSION, session)\n        sendsay.setSessionFromCookie()\n        // document.cookie = `session=${session}; path=/; expires=${()()}`\n        // Authorizing...\n        yield put(setIsAuthorized(true))\n        //set Login Name\n        yield put(setUserData(payload.login))\n        //Route to main page\n        yield put(push(ROUTES.MAIN))\n\n    } catch (error) {\n        console.log('WORKER LOGIN ERROR: ', error)\n        yield put(\n            setErrorFetching({requestName: REQUESTS.POST_LOGIN, error: {id:error.id, explain: error.explain} })\n        )\n    }\n    //not loading\n    yield put(setFetching({requestName: REQUESTS.POST_LOGIN, loading: false}))\n}\n\n\n//LOGOUT REQUEST WORKER\n\nexport function* workerLogout(): any {\n\n\n    //loading...\n    yield put(setFetching({requestName: REQUESTS.POST_LOGOUT, loading: true}))\n\n    try {\n        //login request -->\n        yield call(() => requestToSendsay(\"logout\", {}))\n        eraseCookie(COOKIE_NAMES.SENDSAY_SESSION)\n        // Exit...\n        yield put(setIsAuthorized(false))\n        yield put(removeRequestHistory(false))\n        yield put(resetToInitialFetchState({}))\n        yield put(resetToInitialConsoleState())\n        //Route to main page\n        yield put(push(ROUTES.LOGIN))\n\n    } catch (error) {\n        yield put(\n            setErrorFetching({\n                requestName: REQUESTS.POST_LOGOUT,\n                error:{\n                    id:error.id,\n                    explain:error.explain\n                }\n            })\n        )\n    }\n    //not loading\n    yield put(setFetching({requestName: REQUESTS.POST_LOGOUT, loading: false}))\n}\n\n\n//CONSOLE REQUEST WORKER\nexport type workerConsoleRequestType = { type: string, payload: { action: string, index:number } }\nexport function* workerConsoleRequest({ type, payload } : workerConsoleRequestType): any {\n    console.log(\"workerConsoleRequest\", payload)\n    //loading...\n    yield put(setFetching({requestName: REQUESTS.POST_CONSOLE, loading: true}))\n    const { action, index, ...restPayload } = payload\n    try {\n        const response = yield call(() => requestToSendsay(action, restPayload)) || {}\n        yield put(setRequestHistoryOutput({index, output: response }))\n    } catch (error) {\n        console.log('workerConsoleRequest error', error)\n        yield put(setRequestHistoryErrorRequest({errorRequest:error, index} ))\n        yield put(setErrorFetching({requestName: REQUESTS.POST_CONSOLE, error}))\n    }\n    console.log(\"HELLO FETCHING FLASE\")\n    yield put(setFetching({requestName: REQUESTS.POST_CONSOLE, loading:false}))\n}\n\n//GET USER DATA WORKER\n// export type workerGetUserDataType = { type: string, payload: {} }\nexport function* workerGetUserData(): any {\n    console.log(\"workerGetUserData\")\n    //loading...\n    yield put(setFetching({requestName: REQUESTS.GET_USER_DATA, loading: true}))\n    try {\n        const {list} = yield call(\n            () => requestToSendsay(\n                \"sys.settings.get\",\n                {list: ['about.owner.email']}\n            )\n        ) || {}\n        const login = list['about.owner.email']\n        yield put(setUserData(login))\n        console.log(list)\n    } catch (error) {\n        yield put(postLogout())\n        yield put(setErrorFetching({requestName: REQUESTS.GET_USER_DATA, error}))\n    }\n    yield put(setFetching({requestName: REQUESTS.GET_USER_DATA, loading:false}))\n}\n","import {createAsyncSaga} from \"create-async-saga\";\n// @ts-ignore\nimport {takeEvery} from \"redux-saga/effects\";\nimport {workerConsoleRequest, workerGetUserData, workerLogin, workerLogout} from \"./workers\";\nimport {getUserData, postConsoleRequest, postLogin, postLogout} from \"./reducer\";\n\nexport function* watcherLogin() {\n    yield takeEvery(postLogin.type, workerLogin);\n}\n\nexport function* watcherLogout() {\n    yield takeEvery(postLogout.type, workerLogout);\n}\n\nexport function* watcherConsoleRequest() {\n    yield takeEvery(postConsoleRequest.type, workerConsoleRequest);\n}\n\nexport function* watcherGetUserData() {\n    yield takeEvery(getUserData.type, workerGetUserData);\n}\n","import {combineReducers, configureStore} from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from 'redux-saga'\nimport authReducer from \"../redux/authState/reducer\";\nimport consoleReducer from \"../redux/consoleState/reducer\";\nimport fetchReducer from \"../redux/fetchState/reducer\";\nimport { connectRouter, routerMiddleware } from 'connected-react-router'\nimport { createBrowserHistory } from 'history'\nimport {watcherConsoleRequest, watcherGetUserData, watcherLogin, watcherLogout} from \"../redux/fetchState/wathcers\";\n\nexport const history = createBrowserHistory()\n\n\n//-----ROOT_REDUCER----//\nconst rootReducer = combineReducers({\n    router: connectRouter(history),\n    authState:authReducer,\n    consoleState:consoleReducer,\n    fetchState:fetchReducer\n})\n\n\n\n//-----MIDDLEWARES----//\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n\n//-----STORE----//\nexport const store = configureStore({\n    reducer:rootReducer,\n    middleware: (getDefaultMiddleware) => [...getDefaultMiddleware({ thunk: false })].concat(middlewares)\n})\n\n// @ts-ignore\nwindow.state = store.getState()\n\ntype rootReducerType = typeof rootReducer\nexport type storeType = ReturnType<rootReducerType>\n\nsagaMiddleware.run(watcherLogin)\nsagaMiddleware.run(watcherLogout)\nsagaMiddleware.run(watcherConsoleRequest)\nsagaMiddleware.run(watcherGetUserData)\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n// import {Provider} from \"react-redux\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {history, store} from \"./store\";\nimport { ConnectedRouter } from 'connected-react-router'\n// import {PersistGate} from \"redux-persist/integration/react\";\n// import createStore from \"./store\";\n\n// const {store, persistor} = createStore();\n\n\nReactDOM.render(\n    <Router>\n        <Provider store={store}>\n            <ConnectedRouter history={history}>\n                <App/>\n            </ConnectedRouter>\n        </Provider>\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}